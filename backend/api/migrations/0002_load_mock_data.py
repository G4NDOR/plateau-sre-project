# Generated by Django 5.2.3 on 2025-08-11 21:50

from django.db import migrations
import json
from pathlib import Path

# --- Data Loading Function ---

def load_data(apps, schema_editor):
    """
    This function is executed when the migration is run forward.
    It reads data from JSON files and populates the database.
    """
    # Define the path to the fixtures directory
    fixture_dir = Path(__file__).resolve().parent.parent / 'fixtures'

    # Get the model from the historical app registry
    MenuItem = apps.get_model('api', 'MenuItem')
    InventoryItem = apps.get_model('api', 'InventoryItem')
    TrainingModule = apps.get_model('api', 'TrainingModule')
    ScheduleEntry = apps.get_model('api', 'ScheduleEntry')

    # --- Load Menu Items from menu.json ---
    with open(fixture_dir / 'menu.json') as f:
        menu_data_root = json.load(f)
        menu_data = menu_data_root.get("menuData", {})
        for category, items in menu_data.items():
            for item_data in items:
                MenuItem.objects.get_or_create(
                    name=item_data['name'],
                    defaults={
                        'description': item_data['description'],
                        'price': float(item_data['price']),
                        'category': category,
                        'photo_url': item_data['photo']
                    }
                )

    # --- Load Inventory Items from inventory.json ---
    with open(fixture_dir / 'inventory.json') as f:
        inventory_data_root = json.load(f)
        inventory_data = inventory_data_root.get("inventoryData", [])
        for item_data in inventory_data:
            InventoryItem.objects.get_or_create(
                name=item_data['name'],
                defaults={
                    'category': item_data['category'],
                    'stock': item_data['stock'],
                    'status': item_data['status'],
                    'unit': item_data.get('unit', '')
                }
            )

    # --- Load Training Modules from training.json ---
    with open(fixture_dir / 'training.json') as f:
        training_data_root = json.load(f)
        training_modules = training_data_root.get("trainingModules", [])
        for module_data in training_modules:
            TrainingModule.objects.get_or_create(
                title=module_data['title'],
                defaults={
                    'category': module_data['category'],
                    'type': module_data['type'],
                    'duration': module_data['duration'],
                    'status': module_data['status'],
                    'progress': module_data['progress'],
                    'icon': module_data['icon']
                }
            )

    # --- Load Schedule Entries from schedule.json ---
    with open(fixture_dir / 'schedule.json') as f:
        schedule_data_root = json.load(f)
        schedule_data = schedule_data_root.get("scheduleData", {})
        for day, shifts in schedule_data.items():
            for shift_data in shifts:
                ScheduleEntry.objects.get_or_create(
                    employee_name=shift_data['employee'],
                    day=day,
                    shift=shift_data['shift'],
                    defaults={
                        'role': shift_data['role'],
                        'avatar_url': shift_data['avatar']
                    }
                )

# --- Data Unloading Function (NEW) ---
def unload_data(apps, schema_editor):
    """
    This function is executed when the migration is run backward.
    It deletes the data that was loaded.
    """
    MenuItem = apps.get_model('api', 'MenuItem')
    InventoryItem = apps.get_model('api', 'InventoryItem')
    TrainingModule = apps.get_model('api', 'TrainingModule')
    ScheduleEntry = apps.get_model('api', 'ScheduleEntry')

    # Delete all objects of these types.
    # This is safe because this is just for initial mock data.
    MenuItem.objects.all().delete()
    InventoryItem.objects.all().delete()
    TrainingModule.objects.all().delete()
    ScheduleEntry.objects.all().delete()


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'), # This depends on your first migration
    ]

    operations = [
        # CORRECTED: Pass both the forward and reverse functions
        migrations.RunPython(load_data, reverse_code=unload_data),
    ]
